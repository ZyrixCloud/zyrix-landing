import { NextResponse } from "next/server";
async function subscribeMailchimp(email,name){const API_KEY=process.env.MAILCHIMP_API_KEY;const LIST_ID=process.env.MAILCHIMP_LIST_ID;const PREFIX=process.env.MAILCHIMP_SERVER_PREFIX;if(!API_KEY||!LIST_ID||!PREFIX)return{ok:false,error:"Mailchimp not configured"};const url=`https://${PREFIX}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`;const res=await fetch(url,{method:"POST",headers:{"Content-Type":"application/json","Authorization":"apikey "+API_KEY},body:JSON.stringify({email_address:email,status:"subscribed",merge_fields:{FNAME:name||""}})});if(!res.ok)return{ok:false,error:await res.text()};return{ok:true};}
async function subscribeHubspot(email,name){const KEY=process.env.HUBSPOT_API_KEY;if(!KEY)return{ok:false,error:"HubSpot not configured"};const url=`https://api.hubapi.com/contacts/v1/contact?hapikey=${KEY}`;const res=await fetch(url,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({properties:[{property:"email",value:email},{property:"firstname",value:name||""},{property:"lifecyclestage",value:"subscriber"}]})});if(!res.ok)return{ok:false,error:await res.text()};return{ok:true};}
export async function POST(req){try{const form=await req.formData();const email=String(form.get("email")||"");const name=form.get("name")?String(form.get("name")):undefined;if(!email)return NextResponse.json({ok:false,error:"Missing email"},{status:400});let result=await subscribeMailchimp(email,name);if(!result.ok){result=await subscribeHubspot(email,name);}if(!result.ok){console.warn("Subscription fallback (no provider):",{email,name,error:result.error});}return NextResponse.json({ok:true});}catch(e){return NextResponse.json({ok:false},{status:400});}}